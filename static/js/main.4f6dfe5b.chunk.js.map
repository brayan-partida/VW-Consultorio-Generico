{"version":3,"sources":["components/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","datos","target","name","value","className","onSubmit","e","preventDefault","trim","id","uuid","console","log","type","placeholder","onChange","App","citas","guardarCitas","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uPA4IeA,EA1II,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EAKHC,mBAAS,CACtCC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,KAVsB,mBAK3BC,EAL2B,KAKrBC,EALqB,OAaDP,oBAAS,GAbR,mBAa3BQ,EAb2B,KAapBC,EAboB,KAiB5BC,EAAkB,SAACC,GACvBJ,EAAe,2BACVD,GADS,kBAEXK,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,UAM9Bb,EAAgDK,EAAhDL,QAASC,EAAuCI,EAAvCJ,YAAaC,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,KAAMC,EAAaC,EAAbD,SA2C3C,OAGE,kBAAC,WAAD,KACE,2CAEEG,EACE,uBAAGO,UAAU,gBAAb,sCACE,KAIN,0BAAMC,SApDS,SAACC,GAClBA,EAAEC,iBAMmB,KAAnBjB,EAAQkB,QACe,KAAvBjB,EAAYiB,QACK,KAAjBhB,EAAMgB,QACU,KAAhBf,EAAKe,QACe,KAApBd,EAASc,QAMXV,GAAgB,GAGhBH,EAAKc,GAAKC,MACVC,QAAQC,IAAIjB,GAGZP,EAAUO,GAIdC,EAAe,CACbN,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,MApBNI,GAAgB,KAwCd,iDACA,2BACEe,KAAK,OACLT,UAAU,eACVU,YAAY,iBACZZ,KAAK,UACLa,SAAUhB,EACVI,MAAOb,IAGT,iDACA,2BACEuB,KAAK,OACLT,UAAU,eACVU,YAAY,iBACZZ,KAAK,cACLa,SAAUhB,EACVI,MAAOZ,IAGT,wCACA,2BACEsB,KAAK,OACLT,UAAU,eACVF,KAAK,QACLa,SAAUhB,EACVI,MAAOX,IAGT,uCACA,2BACEqB,KAAK,OACLT,UAAU,eACVF,KAAK,OACLa,SAAUhB,EACVI,MAAOV,IAGT,2CACA,8BACEoB,KAAK,WACLT,UAAU,eACVU,YAAY,WACZZ,KAAK,WACLa,SAAUhB,EACVI,MAAOT,IAGT,4BAAQmB,KAAK,SAAST,UAAU,+BAAhC,mBCtGOY,MA3Bf,WAAe,MAGiB3B,mBAAS,IAH1B,mBAGN4B,EAHM,KAGCC,EAHD,KAYb,OACE,kBAAC,WAAD,KACE,0DACA,yBAAKd,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CAAYhB,UATJ,SAACO,GACjBuB,EAAa,GAAD,mBAAKD,GAAL,CAAYtB,SAUlB,yBAAKS,UAAU,mBAAf,SCrBUe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLc,QAAQd,MAAMA,EAAMuC,c","file":"static/js/main.4f6dfe5b.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport uuid from \"uuid/v4\"\nconst Formulario = ({crearCita}) => {\n\n  \n//NOTE INICIO  DE Hacer nuestra cita   1========>\n\n  const [cita, actualizarCita] = useState({\n    mascota: \"\",\n    propietario: \"\",\n    fecha: \"\",\n    hora: \"\",\n    sintomas: \"\"\n  }); //termina uses state\n\n  const [error, actualizarError] = useState(false);\n\n\n//NOTE OBTENER LOS DATOS DE CADA TEXTO 3===========>\n  const actualizarState = (datos) => {\n    actualizarCita({\n      ...cita,\n      [datos.target.name]: datos.target.value,\n    });\n  };\n  //ANCHOR METODO ESCRIBIENTO\n\n  //NOTE  4creamos propiedades del objeto cita\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\n  //ANCHOR obtnerr dato\n\n  const submitCita = (e) => {\n    e.preventDefault();\n    //alert(\"hola cita\")\n\n    //validacion\n//NOTE 5 validamos\n    if (\n      mascota.trim() === \"\" ||\n      propietario.trim() === \"\" ||\n      fecha.trim() === \"\" ||\n      hora.trim() === \"\" ||\n      sintomas.trim() === \"\"\n    ) {\n      actualizarError(true);\n      return;\n      //actualizarError(error);\n    }\n    actualizarError(false);\n//NOTE 6 generramos su id importamos su id\n    //asignar id\n    cita.id = uuid();\n    console.log(cita);\n\n    //crear cita\n    crearCita(cita)\n\n    //reiniciar el form\n\nactualizarCita({\n  mascota: \"\",\n  propietario: \"\",\n  fecha: \"\",\n  hora: \"\",\n  sintomas: \"\"\n})\n\n\n  }; //ANCHOR  dar click a en la cita\n\n  //NOTE RETORNO==========================>\n  return (\n\n    //NOTE GENERAR EL DISENO 2===========>\n    <Fragment>\n      <h2>Crear citas</h2>\n      {\n        error ? (\n          <p className=\"alerta-error\"> todos los campos son obligatorios</p>\n        ) : null\n        //mensaje error---------------------------->\n      }\n\n      <form onSubmit={submitCita}>\n        <label>Nombre Mascota</label>\n        <input\n          type=\"text\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Mascota\"\n          name=\"mascota\"\n          onChange={actualizarState}\n          value={mascota}\n        />\n\n        <label>Duenio Mascota</label>\n        <input\n          type=\"text\"\n          className=\"u-full-width\"\n          placeholder=\"Duenio Mascota\"\n          name=\"propietario\"\n          onChange={actualizarState}//3.5 generar su cambio y tomar los datos\n          value={propietario}\n        />\n\n        <label>Fecha</label>\n        <input\n          type=\"date\"\n          className=\"u-full-width\"\n          name=\"fecha\"\n          onChange={actualizarState}\n          value={fecha}\n        />\n\n        <label>Hora</label>\n        <input\n          type=\"time\"\n          className=\"u-full-width\"\n          name=\"hora\"\n          onChange={actualizarState}\n          value={hora}\n        />\n\n        <label>Sintomas</label>\n        <textarea\n          type=\"textarea\"\n          className=\"u-full-width\"\n          placeholder=\"Sintomas\"\n          name=\"sintomas\"\n          onChange={actualizarState}\n          value={sintomas}\n        ></textarea>\n\n        <button type=\"submit\" className=\"u-full-width button-primary\">\n          Agregar cita\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n\nexport default Formulario;\n","import React, { Fragment, useState } from \"react\";\nimport Formulario from \"./components/Formulario.js\";\n\nfunction App() {\n  //areglo de todas las citas\n  //NOTE  6 Generamos el state para citas\n  const [citas, guardarCitas] = useState([]);\n\n  //funcion citas actuales nueves\n\n\n  //Creamos la funcion  Para las citas\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n  return (\n    <Fragment>\n      <h1>administrados de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">2</div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}